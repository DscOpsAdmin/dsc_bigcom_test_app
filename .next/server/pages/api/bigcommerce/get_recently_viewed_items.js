"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/bigcommerce/get_recently_viewed_items";
exports.ids = ["pages/api/bigcommerce/get_recently_viewed_items"];
exports.modules = {

/***/ "nextjs-cors":
/*!******************************!*\
  !*** external "nextjs-cors" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("nextjs-cors");

/***/ }),

/***/ "(api)/./pages/api/bigcommerce/get_recently_viewed_items.js":
/*!************************************************************!*\
  !*** ./pages/api/bigcommerce/get_recently_viewed_items.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ get_recently_viewed_items)\n/* harmony export */ });\n/* harmony import */ var nextjs_cors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nextjs-cors */ \"nextjs-cors\");\n/* harmony import */ var nextjs_cors__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(nextjs_cors__WEBPACK_IMPORTED_MODULE_0__);\n\nasync function get_recently_viewed_items(req, res) {\n  const logTitle = \" get_recently_viewed_items() \";\n\n  try {\n    console.log(logTitle, \"EXECUTED!\");\n    await nextjs_cors__WEBPACK_IMPORTED_MODULE_0___default()(req, res, {\n      methods: ['GET', 'HEAD', 'PUT', 'PATCH', 'POST', 'DELETE'],\n      origin: '*',\n      optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n\n    });\n    const requestBody = req.body;\n    const {\n      storeHash,\n      accessToken,\n      customerId\n    } = requestBody;\n    let responseObj = {};\n    responseObj.status = \"ERROR\";\n    responseObj.message = \"Unexpected error!\";\n\n    if (storeHash && accessToken) {\n      if (customerId) {\n        let productsCatalogMapObj = {};\n        getProductsCatalog(storeHash, accessToken).then(response => response.json()).then(getProductsCatalogResponseObj => {\n          if (getProductsCatalogResponseObj && getProductsCatalogResponseObj.data && getProductsCatalogResponseObj.data.length > 0) {\n            let productsMapObj = {};\n\n            for (let index1 in getProductsCatalogResponseObj.data) {\n              const productDataObj = getProductsCatalogResponseObj.data[index1];\n              if (productDataObj.id && !productsMapObj[productDataObj.id]) productsMapObj[productDataObj.id] = productDataObj;\n            }\n\n            console.log(logTitle + \"productsMapObj\", productsMapObj);\n            getCustomerById(storeHash, accessToken, customerId).then(response => response.json()).then(getCustomerResponseObj => {\n              let recentlyViewedProductsDataMapObj = {};\n\n              if (getCustomerResponseObj && getCustomerResponseObj.id) {\n                let recentlyViewedProductsMapObj = getCustomerResponseObj.notes ? JSON.parse(getCustomerResponseObj.notes) : {};\n                console.log(logTitle + \"recentlyViewedProductsMapObj\", recentlyViewedProductsMapObj);\n\n                for (let dateString in recentlyViewedProductsMapObj) {\n                  const recentlyViewedProductIds = recentlyViewedProductsMapObj[dateString];\n\n                  for (let index2 in recentlyViewedProductIds) {\n                    let recentlyViewedProductId = recentlyViewedProductIds[index2];\n                    recentlyViewedProductIds[index2] = productsMapObj[recentlyViewedProductId];\n                  }\n                }\n\n                responseObj.status = \"SUCCESS\";\n                responseObj.message = \"Fetched products!\";\n                responseObj.data = {\n                  recentlyViewedProductsMapObj\n                }; // responseObj.otherResponse = getProductsCatalogResponseObj;\n\n                res.json(responseObj);\n              }\n            });\n          }\n        });\n      } else {\n        responseObj.message = \"Customer ID not found! Please also provide Customer ID.\";\n        res.json(responseObj);\n      }\n    } else {\n      responseObj.message = \"Please provide account auth info!\";\n      res.json(responseObj);\n    }\n  } catch (e) {\n    console.error(\"ERROR IN\" + logTitle, e);\n  }\n}\n\nfunction getCustomerById(storeHash, accessToken, customerId) {\n  const logTitle = \" getCustomerById() \";\n\n  try {\n    const requestUrl = \"https://api.bigcommerce.com/stores/\" + storeHash + \"/v2/customers/\" + customerId;\n    const requestHeaders = {\n      \"X-Auth-Token\": accessToken,\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    };\n    return fetch(requestUrl, {\n      method: \"GET\",\n      headers: requestHeaders\n    });\n  } catch (e) {\n    console.error(\"ERROR IN\" + logTitle, e);\n  }\n}\n\nfunction getProductsCatalog(storeHash, accessToken) {\n  const logTitle = \" getProductsCatalog() \";\n\n  try {\n    const requestUrl = \"https://api.bigcommerce.com/stores/\" + storeHash + \"/v3/catalog/products?include=images\"; //https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products\n\n    const requestHeaders = {\n      \"host\": \"api.bigcommerce.com\",\n      \"X-Auth-Token\": accessToken,\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    };\n    return fetch(requestUrl, {\n      method: \"GET\",\n      headers: requestHeaders\n    });\n  } catch (e) {\n    console.error(\"ERROR IN\" + logTitle, e);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/bigcommerce/get_recently_viewed_items.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/bigcommerce/get_recently_viewed_items.js"));
module.exports = __webpack_exports__;

})();